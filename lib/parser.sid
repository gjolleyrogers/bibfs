%types%

	string;
	field;
	entry;

%terminals%

	!error;

	eof;
	!nl;
	equ;
	comma;
	at;
	obrace;
	cbrace;

	str: () -> (:string);

%productions%

	<free>: (:string) -> ();

	<new-field>: (:string, :string) -> (:field);
	<add-field>: (:field, :field) -> (:field);
	<null-field>: () -> (:field);

	<new-entry>: (:string, :string, :field) -> (:entry);
	<add-entry>: (:entry, :entry) -> (:entry);
	<null-entry>: () -> (:entry);

	fields: () -> (f :field) [

		field: () -> (f :field) = {
			n = str; /* name */
			equ;
			v = str; /* value */

			f = <new-field>(n, v);

			<free>(n);
			<free>(v);
		};

	] = {
		a = field;
		{
			f = a;
		||
			comma;
			b = fields;
			f = <add-field>(a, b);
		};
	||
		f = <null-field>;
	};

	entries: () -> (e :entry) [

		entry: () -> (e :entry) = {
			at;
			t = str; /* type */
			obrace;
			k = str; /* key */
			comma;

			f = fields;

			cbrace;

			e = <new-entry>(t, k, f);

			/* t is owned by the entry */
			<free>(k);

		/* ## TODO: panic until next @. log paniced-over bytes somewhere */
		};

	] = {
		a = entry;
		{
			e = a;
		||
			b = entries;
			e = <add-entry>(a, b);
		};
	};

	bib: () -> (e :entry) = {
		{
			e = entries;
		||
			e = <null-entry>;
		};
		eof;
	};

%entry%

	bib;

