%prefixes%

	terminal = tok_;
	function = p_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;

%maps%

	string -> string;
	field  -> field;
	entry  -> entry;

%header% @{

	#define _POSIX_SOURCE

	#include <sys/types.h>
	#include <sys/stat.h>
	#include <sys/mman.h>

	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdio.h>

	#include <bib/debug.h>
	#include <bib/lex.h>
	#include <bib/bib.h>

	typedef char *             string;
	typedef struct bib_field * field;
	typedef struct bib_entry * entry;
	typedef struct act_state * act_state;
	typedef struct lex_state * lex_state;

	struct act_state {
		struct lex_tok t;
		enum lex_type type, save;
	};

	#define CURRENT_TERMINAL act_state->type
	#define ERROR_TERMINAL   tok_error
	#define ADVANCE_LEXER    lex_next(lex_state, &act_state->t); \
	                         act_state->type = act_state->t.type;
	#define SAVE_LEXER(tok)  act_state->save = tok;
	#define RESTORE_LEXER    act_state->type = act_state->save;

@}, @{

	#include <stdio.h>

	struct bib_entry;

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;
	typedef struct bib_entry * entry;

	struct bib_entry *bib_parse(FILE *f);

@};

%terminals%

	str: () -> (s :string) = @{
		size_t n;

		assert(act_state->t.s != NULL);
		assert(act_state->t.e >= act_state->t.s);

		n = act_state->t.e - act_state->t.s;

		@s = malloc(n + 1);
		if (@s == NULL) {
			perror("malloc");
			exit(EXIT_FAILURE); /* XXX: not really what i want to do */
		}

		memcpy(@s, act_state->t.s, n);
		@s[n] = '\0';
	@};

%actions%

	<free>: (s :string) -> () = @{
		assert(@s != NULL);

		free(@s);
	@};

	<new-field>: (n :string, v :string) -> (f :field) = @{
		struct bib_value *v;

		assert(@n != NULL);
		assert(@v != NULL);

		v = bib_new_value(@v);
		if (v == NULL) {
			perror("bib_new_value");
			@!;
		}

		@f = bib_new_field(@n, v);
		if (@f == NULL) {
			/* TODO: bib_free_value(v); */
			perror("bib_new_field");
			@!;
		}

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<new-field> (n = \"%s\", v = \"%s\" -> (v = %p, f = %p)\n",
				@n, @v, (void *) v, (void *) @f);
		}
	@};

	<add-field>: (a :field, b :field) -> (f :field) = @{
		assert(@a->next == NULL);

		@a->next = @b;
		@f = @a;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<add-field> (a = %p, b = %p) -> (f = %p)\n",
				(void *) @a, (void *) @b, (void *) @f);
		}
	@};

	<null-field>: () -> (f :field) = @{
		@f = NULL;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<null-field> () -> (f = %p)\n",
				(void *) @f);
		}
	@};

	<new-entry>: (t :string, k :string, f :field) -> (e :entry) = @{
		assert(@t != NULL);
		assert(@k != NULL);

		@e = bib_new_entry(@t, @k, @f);
		if (@e == NULL) {
			perror("bib_new_entry");
			@!;
		}

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<new-entry>(t = \"%s\", k = \"%s\", f = %p) -> (e = %p)\n",
				@t, @k, (void *) @f, (void *) @e);
		}
	@};

	<add-entry>: (a :entry, b :entry) -> (e :entry) = @{
		assert(@a->next == NULL);

		@a->next = @b;
		@e = @a;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<add-entry>(a = %p, b = %p) -> (e = %p)\n",
				(void *) @a, (void *) @b, (void *) @e);
		}
	@};

	<null-entry>: () -> (e :entry) = @{
		@e = NULL;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<null-entry> () -> (%p)\n",
				(void *) @e);
		}
	@};

%trailer% @{

	struct bib_entry *bib_parse(FILE *f) {
		struct lex_state l, *lex_state = &l;
		struct act_state a, *act_state = &a;
		struct bib_entry *e;
		struct stat st;
		void *p;

		assert(f != NULL);

		if (-1 == fstat(fileno(f), &st)) {
			return NULL;
		}

		p = mmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE, fileno(f), 0U);
		if (p == MAP_FAILED) {
			return NULL;
		}

		l.buf = malloc(st.st_size + 1);
		if (l.buf == NULL) {
			(void) munmap(p, st.st_size);
			return NULL;
		}

		memcpy(l.buf, p, st.st_size);
		l.buf[st.st_size] = '\0';

		l.b = 0;
		l.f = f;
		l.p = l.buf;

		ADVANCE_LEXER;	/* XXX: what if the first token is unrecognised? */
		p_bib(lex_state, act_state, &e);

		(void) munmap(p, st.st_size);
		free(l.buf);

		return e;
	}

@}, @{

@};

